name: Deploy Frappe App

on:
  push:
    branches:
      - main
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download and Setup StrongDM CLI (Non-Interactive)
        run: |
          echo "Downloading StrongDM CLI..."
          curl -J -O -L https://app.strongdm.com/releases/cli/linux
      
          SDM_ZIP=$(ls sdmcli_*_linux_amd64.zip)
          echo "Found StrongDM CLI zip: $SDM_ZIP"
          unzip $SDM_ZIP
          echo "Unzipped StrongDM CLI."

          # Move the sdm binary to a location in PATH
          chmod +x sdm
          sudo mv sdm /usr/local/bin/sdm
          echo "StrongDM CLI moved to /usr/local/bin."

      - name: Start StrongDM Daemon and Login
        run: |
          echo "Starting StrongDM daemon in background and logging in..."
          # The `sdm login` command is expected to start the daemon and authenticate it.
          # We use `nohup` to detach it from the terminal and `&` to run it in the background.
          # Redirect output to a log file to prevent it from blocking the workflow.
          nohup sdm login --admin-token=${{ secrets.SDM_ADMIN_TOKEN }} > sdm_daemon.log 2>&1 &
          # Store the PID for later cleanup
          echo $! > sdm_daemon.pid
          echo "StrongDM daemon started with PID $(cat sdm_daemon.pid) and login attempted."
          # Give the daemon a moment to initialize
          sleep 5

      - name: Wait for StrongDM Daemon Readiness
        run: |
          echo "Waiting for StrongDM daemon to be ready..."
          # Use sdm ready in a loop to ensure the daemon is fully operational
          for i in $(seq 1 12); do # Increased attempts to 12 (60 seconds total)
            if sdm ready; then
              echo "StrongDM daemon is ready."
              exit 0
            fi
            echo "Daemon not ready yet, waiting... ($i/12)"
            sleep 5
          done
          echo "StrongDM daemon did not become ready in time."
          exit 1

      - name: Test StrongDM CLI Status (Daemon should be running and connected)
        run: |
          echo "Checking StrongDM status..."
          sdm status
          # Expected output: servers should now show as \'connected\' or \'ready\'

      - name: Deploy to customer1
        if: contains(github.event.head_commit.message, '[customer1]')
        run: |
          echo "Attempting SSH deployment to customer1..."
          sdm ssh erp_demo "
            cd /opt/bench/frappe-bench/ &&
            bench get-app git@github.com:oun-qa/malek_app.git
          "
          echo "SSH deployment command executed."

      - name: Stop StrongDM Daemon (Cleanup)
        if: always()
        run: |
          echo "Attempting to stop StrongDM daemon..."
          # Kill the daemon using its PID
          if [ -f sdm_daemon.pid ]; then
            kill $(cat sdm_daemon.pid) || true
            echo "StrongDM daemon stopped."
          else
            echo "sdm_daemon.pid not found, attempting pkill..."
            pkill sdm || true
            echo "StrongDM daemon stopped (via pkill)."
          fi
